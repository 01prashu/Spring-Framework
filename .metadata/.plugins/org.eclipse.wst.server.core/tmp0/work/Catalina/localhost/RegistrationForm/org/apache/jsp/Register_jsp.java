/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.24
 * Generated at: 2024-06-01 11:58:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class Register_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Advanced Form with Background Image</title>\r\n");
      out.write("<style>\r\n");
      out.write("    @keyframes fadeIn {\r\n");
      out.write("        from { opacity: 0; transform: translateY(-20px); }\r\n");
      out.write("        to { opacity: 1; transform: translateY(0); }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    @keyframes inputFocus {\r\n");
      out.write("        from { border-color: #ccc; box-shadow: none; }\r\n");
      out.write("        to { border-color: #f5ba13; box-shadow: 0 0 10px rgba(245, 186, 19, 0.5); }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    body {\r\n");
      out.write("        font-family: Arial, sans-serif;\r\n");
      out.write("        color: #ffffff;\r\n");
      out.write("        display: flex;\r\n");
      out.write("        justify-content: center;\r\n");
      out.write("        align-items: center;\r\n");
      out.write("        height: 100vh;\r\n");
      out.write("        margin: 0;\r\n");
      out.write("        animation: fadeIn 1s ease-out;\r\n");
      out.write("        background: \r\n");
      out.write("            linear-gradient(rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.4)),\r\n");
      out.write("            url('https://source.unsplash.com/collection/190727/1920x1080') no-repeat center center fixed;\r\n");
      out.write("        background-size: cover;\r\n");
      out.write("        transition: background-image 1s ease-in-out;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .container {\r\n");
      out.write("        background-color: rgba(30, 30, 30, 0.8);\r\n");
      out.write("        padding: 20px;\r\n");
      out.write("        border-radius: 8px;\r\n");
      out.write("        box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);\r\n");
      out.write("        width: 400px;\r\n");
      out.write("        text-align: center;\r\n");
      out.write("        animation: fadeIn 1s ease-out;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    h2 {\r\n");
      out.write("        margin-bottom: 20px;\r\n");
      out.write("        color: #f5ba13;\r\n");
      out.write("        animation: fadeIn 1.5s ease-out;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    input[type=\"text\"], input[type=\"date\"] {\r\n");
      out.write("        width: calc(100% - 22px);\r\n");
      out.write("        padding: 10px;\r\n");
      out.write("        margin: 10px 0;\r\n");
      out.write("        border: 1px solid #ccc;\r\n");
      out.write("        border-radius: 4px;\r\n");
      out.write("        box-sizing: border-box;\r\n");
      out.write("        background-color: #333333;\r\n");
      out.write("        color: #ffffff;\r\n");
      out.write("        transition: border-color 0.3s ease, box-shadow 0.3s ease;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    input[type=\"text\"]:focus, input[type=\"date\"]:focus {\r\n");
      out.write("        border-color: #f5ba13;\r\n");
      out.write("        box-shadow: 0 0 10px rgba(245, 186, 19, 0.5);\r\n");
      out.write("        animation: inputFocus 0.3s forwards;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    input[type=\"submit\"], input[type=\"reset\"] {\r\n");
      out.write("        background-color: #f5ba13;\r\n");
      out.write("        color: white;\r\n");
      out.write("        padding: 10px 20px;\r\n");
      out.write("        border: none;\r\n");
      out.write("        border-radius: 4px;\r\n");
      out.write("        cursor: pointer;\r\n");
      out.write("        width: 48%;\r\n");
      out.write("        margin: 5px 1%;\r\n");
      out.write("        transition: background-color 0.3s ease, transform 0.3s ease;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    input[type=\"submit\"]:hover, input[type=\"reset\"]:hover {\r\n");
      out.write("        background-color: #e0a800;\r\n");
      out.write("        transform: translateY(-2px);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .form-group {\r\n");
      out.write("        margin-bottom: 15px;\r\n");
      out.write("        animation: fadeIn 1s ease-out;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    label {\r\n");
      out.write("        display: block;\r\n");
      out.write("        text-align: left;\r\n");
      out.write("        margin-bottom: 5px;\r\n");
      out.write("        color: #f5ba13;\r\n");
      out.write("        animation: fadeIn 1.5s ease-out;\r\n");
      out.write("    }\r\n");
      out.write("</style>\r\n");
      out.write("<script>\r\n");
      out.write("    var images = [\r\n");
      out.write("        'https://source.unsplash.com/collection/190727/1920x1080',\r\n");
      out.write("        'https://source.unsplash.com/collection/190728/1920x1080',\r\n");
      out.write("        'https://source.unsplash.com/collection/190729/1920x1080'\r\n");
      out.write("    ];\r\n");
      out.write("    var currentIndex = 0;\r\n");
      out.write("\r\n");
      out.write("    function changeBackground() {\r\n");
      out.write("        document.body.style.backgroundImage = 'linear-gradient(rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.4)), url(' + images[currentIndex] + ')';\r\n");
      out.write("        currentIndex = (currentIndex + 1) % images.length;\r\n");
      out.write("        setTimeout(changeBackground, 5000); // Change every 5 seconds\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // Start the background change process\r\n");
      out.write("    changeBackground();\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <h2>Registration Form</h2>\r\n");
      out.write("        <form action=\"/submitForm\" method=\"post\">\r\n");
      out.write("            <div class=\"form-group\">\r\n");
      out.write("                <label for=\"firstName\">First Name:</label>\r\n");
      out.write("                <input type=\"text\" id=\"firstName\" name=\"firstName\" required>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"form-group\">\r\n");
      out.write("                <label for=\"lastName\">Last Name:</label>\r\n");
      out.write("                <input type=\"text\" id=\"lastName\" name=\"lastName\" required>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"form-group\">\r\n");
      out.write("                <label for=\"dob\">Date of Birth:</label>\r\n");
      out.write("                <input type=\"date\" id=\"dob\" name=\"dob\" required>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"form-group\">\r\n");
      out.write("                <label for=\"city\">City:</label>\r\n");
      out.write("                <input type=\"text\" id=\"city\" name=\"city\" required>\r\n");
      out.write("            </div>\r\n");
      out.write("            <input type=\"submit\" value=\"Submit\">\r\n");
      out.write("            <input type=\"reset\" value=\"Reset\">\r\n");
      out.write("        </form>\r\n");
      out.write("    </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
